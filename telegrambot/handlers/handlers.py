import json
import os, sys

from django.http import HttpResponse
from django.views.decorators.csrf import csrf_exempt
from requests.exceptions import ConnectionError, ReadTimeout

from django.core.management.base import BaseCommand
import telebot
from django.conf import settings

from telegrambot.service.services import Service

bot = telebot.TeleBot(settings.BOT_TOKEN)


@csrf_exempt
def telegram_webhook(request):
    if request.method == 'POST':
        update = telebot.types.Update.de_json(request.body.decode('utf-8'))
        bot.process_new_updates([update])
    return HttpResponse(status=200)


class Handler:
    service = Service()
    bot = bot

    @staticmethod
    @bot.message_handler(commands=['start'])
    @bot.message_handler(commands=['menu'])
    @bot.message_handler(regexp='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    def start_message(message):
        state, markup = Handler.service.registered_or_not(message)
        if state:
            bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. '
                                              f'–¢—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å —Ä–∞–∑–¥–µ–ª, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –ø–æ—Å–µ—Ç–∏—Ç—å. üëá',
                             reply_markup=markup)
            bot.send_message(message.chat.id,
                             'P.s –ï—Å–ª–∏ —É —Ç–µ–±—è –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –∫–Ω–æ–ø–∫–∏, –Ω–∞–∂–º–∏ –Ω–∞ –∑–Ω–∞—á–æ–∫ –≤ –≤–∏–¥–µ –æ–∫–Ω–∞ —Å–ª–µ–≤–∞ —É '
                             '–º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.')
        else:
            bot.send_message(message.chat.id, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –Ω–∞–∂–º–∏—Ç–µ '
                                              '–∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ', reply_markup=markup)
        Handler.service.clean_markup()

    @staticmethod
    @bot.message_handler(commands=['statistic'])
    def my_statistic_message(message, ):
        registred, markup = Handler.service.registered_or_not(message, flag=True)
        if registred:
            level, status, exp, quality = Handler.service.get_status(message)
            markup = Handler.service.get_main_menu_markup()
            bot.send_message(message.chat.id, f'–í–∞—à —É—Ä–æ–≤–µ–Ω—å: {level}\n\n'
                                              f'–ù–∞ —ç—Ç–æ–º —É—Ä–æ–≤–Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ –∫–∞—Ä—Ç: {exp}\n\n'
                                              f'–ö–∞—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {quality}\n\n'
                                              f'–í–∞—à —Å—Ç–∞—Ç—É—Å: "{status}"', reply_markup=markup)
        else:
            bot.send_message(message.chat.id, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –Ω–∞–∂–º–∏—Ç–µ '
                                              '–∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ', reply_markup=markup)

        Handler.service.clean_markup()

    @staticmethod
    @bot.message_handler(commands=['moving_db.json'])
    def update_db(message):
        bot.send_message(message.chat.id, '–ü—Ä–∏—Å—Ç—É–ø–∏–ª –∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é –±–¥')
        Handler.service.update_db('moving_db.json')
        bot.send_message(message.chat.id, '–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã')
        Handler.service.clean_markup()

    @staticmethod
    @bot.message_handler(commands=['drop_db'])
    def update_db(message):
        bot.send_message(message.chat.id, '–ü—Ä–∏—Å—Ç—É–ø–∏–ª –∫ —É–¥–∞–ª–µ–Ω–∏—é –±–¥')
        Handler.service.delete_table()
        bot.send_message(message.chat.id, '–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã')
        Handler.service.clean_markup()

    @staticmethod
    @bot.message_handler(regexp='–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    def start_registration(message, ):
        status = Handler.service.registration_on()

        if status:
            markup = Handler.service.get_contact_markup()
            bot.send_message(message.chat.id,
                             '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¢–†–ï–ù–ê–ñ–Å–† –°–ß–ê–°–¢–¨–Ø!\n\n–ß—Ç–æ–±—ã —è —Å–º–æ–≥ –í–∞—Å –æ–ø–æ–∑–Ω–∞—Ç—å, '
                             '—É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. \n\n–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º'
                             ' —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ, '
                             '–ù–û –¢–û–õ–¨–ö–û –ï–°–õ–ò –≤–∞—à –õ–ò–ß–ù–´–ô –Ω–æ–º–µ—Ä —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –†–ê–ë–û–ß–ò–ú –Ω–æ–º–µ—Ä–æ–º',
                             reply_markup=markup)
        else:
            _, markup = Handler.service.registered_or_not(message)
            bot.send_message(message.chat.id, '–°–µ–π—á–∞—Å –º—ã –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö ...\n\n'
                                              '–ü–æ–¥–æ–∂–¥–∏—Ç–µ –±—É–∫–≤–∞–ª—å–Ω–æ –º–∏–Ω—É—Ç–∫—É –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –µ—â–µ —Ä–∞–∑ üòá',
                             reply_markup=markup)
        Handler.service.clean_markup()

    @staticmethod
    @bot.message_handler(content_types=['contact'])
    def check_phone(message, ):
        markup = Handler.service.yes_or_not_markup()
        bot.send_message(message.chat.id,
                         f'–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {message.contact.phone_number}, –≤–µ—Ä–Ω–æ?',  # —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –∫—ç—à–∏–∫
                         reply_markup=markup)
        Handler.service.set_phone_in_ram(message)
        Handler.service.clean_markup()

    @staticmethod
    @bot.message_handler(regexp='–î–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º')
    def check_user_data(message, ):
        bot.send_message(message.chat.id, '–ü–∞—Ä—É —Å–µ–∫—É–Ω–¥, –∏—â—É –≤–∞—Å –≤ –ë–∞–∑–µ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ ...')

        messages, markup, [] = Service.check_in_base(message)

        bot.send_message(message.chat.id, messages[0], reply_markup=markup[0])
        Handler.service.clean_markup()

    @staticmethod
    @bot.message_handler(regexp='–ù–µ—Ç, —è —Ö–æ—á—É –ø–æ–º–µ–Ω—è—Ç—å')
    def change_number(message, ):
        Handler.start_registration(message)
        Handler.service.clean_markup()

    @staticmethod
    @bot.message_handler(regexp='–î–µ–ª–æ —Ç–µ—Ö–Ω–∏–∫–∏')
    def tech_deal(message, ):

        registered, markup = Handler.service.registered_or_not(message, flag=True)
        if registered:
            markup = Handler.service.get_main_menu_markup()
            bot.send_message(message.chat.id, "<b>–ê–ª–≥–æ—Ä–∏—Ç–º –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é:</b> \n\n"
                                              "–®–∞–≥ 1: –ê–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è (–î–∞—Ç—å –ø–æ–Ω—è—Ç—å, —á—Ç–æ –≥–æ—Å—Ç—è —É—Å–ª—ã—à–∞–ª–∏, "
                                              "–ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å, –µ—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ)\n"
                                              "–®–∞–≥ 2: –†–µ—á–µ–≤–æ–π –ø—Ä–∏–µ–º ‚Äú–ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ X, –∏–Ω–æ–≥–¥–∞ –±—ã–≤–∞–µ—Ç Y‚Äù\n"
                                              "–®–∞–≥ 3: –ü–µ—Ä–µ—Ö–≤–∞—Ç –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã. (–û—Ç–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å —Å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º "
                                              "–¥–æ–ø—É—â–µ–Ω–∏–µ–º)\n\n"
                                              "https://youtu.be/qg_LQ-GdlsI\n\n"
                                              "*–î–∞–Ω–Ω—ã–µ —Ä–µ—á–µ–≤—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º—ã –≤ —Ç–µ—Ö —Å–ª—É—á–∞—è—Ö, –∫–æ–≥–¥–∞ "
                                              "–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –µ—Å—Ç—å —Å–µ—Ä—å–µ–∑–Ω–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å "
                                              "–º–µ—Ç—Ä–¥–æ—Ç–µ–ª—è.",
                             reply_markup=markup,
                             parse_mode='HTML')
        else:
            bot.send_message(message.chat.id, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –Ω–∞–∂–º–∏—Ç–µ '
                                              '–∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ', reply_markup=markup)
        Handler.service.clean_markup()

    @staticmethod
    @bot.message_handler(regexp='–ü–æ—á–µ–º—É –≤–∞–∂–Ω–æ —Ä–∞–∑—Ä–µ—à–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —É–º–Ω–æ')
    def tech_deal(message, ):
        registered, markup = Handler.service.registered_or_not(message, flag=True)
        if registered:
            markup = Handler.service.get_main_menu_markup()
            bot.send_message(message.chat.id,
                             "<b>–ó–∞—á–µ–º —Ä–µ—à–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —É–º–Ω–æ</b>\n\n"
                             "–≠—Ç–æ—Ç —Ç—Ä–µ–Ω–∞–∂–µ—Ä –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –≤—ã–π—Ç–∏ ‚Äú—Å—É—Ö–∏–º –∏–∑ –≤–æ–¥—ã‚Äù. –ù–µ–π—Ç—Ä–∞–ª–∏–∑—É–π—Ç–µ –≤–æ–∑–º—É—â–µ–Ω–∏–µ –≥–æ—Å—Ç—è, "
                             "–µ–≥–æ –∂–µ–ª–∞–Ω–∏–µ –≤–∞—Å –∑–∞—Ü–µ–ø–∏—Ç—å —Å –ø–æ–º–æ—â—å—é –ø—Ä–æ—Å—Ç—ã—Ö –ø—Ä–∏–µ–º–æ–≤.\n\n"
                             "–¢–µ–º –Ω–µ –º–µ–Ω–µ–µ, –ø–æ–º–Ω–∏—Ç–µ: –ª—É—á—à–µ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ ‚Äì —ç—Ç–æ –µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.\n\n"
                             "https://youtu.be/_Du6wK3tSnc",
                             reply_markup=markup, parse_mode='HTML')
        else:
            bot.send_message(message.chat.id, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –Ω–∞–∂–º–∏—Ç–µ '
                                              '–∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ', reply_markup=markup)
        Handler.service.clean_markup()

    @staticmethod
    @bot.message_handler(regexp='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è')
    @bot.message_handler(regexp='–¢–†–ï–ù–ê–ñ–Å–†')
    def send_card_preview(message, ):
        registred, markup = Handler.service.registered_or_not(message, flag=True)
        # print(registred, markup)
        if registred:
            bot.send_message(message.chat.id, "–ü–∞—Ä—É —Å–µ–∫—É–Ω–¥, –ø–æ–¥–±–∏—Ä–∞—é —Å–∏—Ç—É–∞—Ü–∏—é ...")
            Handler.service.send_card(message)
            Handler.send_some_message(message, )
        else:
            bot.send_message(message.chat.id, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –Ω–∞–∂–º–∏—Ç–µ '
                                              '–∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ', reply_markup=markup)
        Handler.service.clean_markup()

    @staticmethod
    @bot.message_handler(content_types=['document'])
    def get_table(message, ):
        if Handler.service.check_the_admin(message):
            data_type, path = Handler.service.download_table(bot, message)
            if data_type == 'xlsx':
                bot.send_message(message.chat.id, '–¢–∞–±–ª–∏—á–∫—É —Å–∫—É—à–∞–ª')
                bot.send_message(message.chat.id, '–ù–∞—á–∏–Ω–∞—é —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ç–∞–±–ª–∏—á–∫–æ–π')
                Handler.service.excel_to_json(path)
            elif data_type == 'json':
                bot.send_message(message.chat.id, '–ö—É—à–∞—é Json')
                Handler.service.rename_json(path)
                bot.send_message(message.chat.id, '–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª –µ–≥–æ, –º–æ–∂–Ω–æ –∏ –±–∞–∑—É –æ–±–Ω–æ–≤–∏—Ç—å')
            else:
                bot.send_message(message.chat.id, '–Ø –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç')
        else:
            bot.send_message(message.chat.id, '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω')

        Handler.service.clean_markup()

    @staticmethod
    @bot.message_handler(commands=['form'])
    def send_form(message):
        registered, markup = Handler.service.registered_or_not(message, flag=True)

        if registered:
            Handler.service.set_form_state(message)

            bot.send_message(message.chat.id, '–í–∏–∂—É, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–ª—É—á—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞—à–µ–≥–æ '
                                              '–±–æ—Ç–∞ –∏ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–∞ –≤ —Ü–µ–ª–æ–º. –ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∞—è —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∞ –∏–¥–µ—è ?')

    @staticmethod
    @bot.message_handler(commands=['spam_mailing'])
    def spam_mailing(message):
        registered, markup = Handler.service.registered_or_not(message, flag=True)
        if registered:
            Handler.service.set_mailing_state(message, "MAIL")

            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏')

    @staticmethod
    @bot.message_handler(commands=['test_mailing'])
    def test_mailing(message):
        registered, markup = Handler.service.registered_or_not(message, flag=True)
        if registered:
            Handler.service.set_mailing_state(message, "TEST_MAIL")

            bot.send_message(message.chat.id, '[+]–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–°–°–´–õ–ö–ò[+]\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏')

    @staticmethod
    @bot.message_handler(commands=['mood'])
    def send_mood_notice(message):

        markup = Service().get_mood_markup()

        sent_message = bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, –º–Ω–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –≤–∞—à–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞'
                                                         ' —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –º–Ω–µ –∫–∞–∫–æ–µ –æ–Ω–æ. \n\n –û—Ü–µ–Ω–∏—Ç–µ –µ–≥–æ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 10,'
                                                         ' –≥–¥–µ 10 - —Å—É–ø–µ—Ä-–ø—É–ø–µ—Ä, –∞ 1 - –æ—á–µ–Ω—å –ø–ª–æ—Ö–æ',
                                        reply_markup=markup)

        Service().save_message_id(message.from_user.id, sent_message.message_id)

        Handler.service.clean_markup()

    @staticmethod
    @bot.callback_query_handler(func=lambda message: True)
    def handle_multiple_values_callback(message):

        Handler.service.clean_markup()

        markup = Service().write_mood_in_base(message.from_user.id, message.data)
        message_id = Service().get_message_id(message.from_user.id)
        bot.delete_message(message.from_user.id, message_id)
        bot.send_message(message.from_user.id, f'–û—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω )', reply_markup=markup)

        Handler.service.clean_markup()


    ######################################

    ######################################

    @staticmethod
    @bot.message_handler(func=lambda message: True)
    def send_some_message(message):
        if not(Handler.service.get_day_mood_state(message)):
            Handler.send_mood_notice(message)
            return
        messages, markups, photos = Handler.service.fork(message)

        if photos:
            for photo_name in photos:
                bot.send_photo(message.chat.id, photo=open(photo_name, 'rb'))

                if os.path.exists(photo_name) and 'NEW' in photo_name:
                    os.remove(os.path.join(settings.BASE_DIR, photo_name))
        # print(markups, messages)
        for markup, msg in zip(markups, messages):
            bot.send_message(message.chat.id, msg, reply_markup=markup)
        for ids in markups:
            if type(ids) == list:
                for tg_id in ids:
                    # print(tg_id)
                    bot.send_message(tg_id, message.text)
                bot.send_message(message.chat.id, "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ !")

        Handler.service.clean_markup()
        Handler.service.clean_markup()
