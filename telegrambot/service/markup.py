import random

from telebot import types
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup

# from .services  Service
from telegrambot.repository.repository import Repository


class Markup:
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    repository = Repository

    @staticmethod
    def clean_markup(flag=None):
        Markup.markup.keyboard.clear()
        if flag:
            return types.ReplyKeyboardRemove()
        return

    @staticmethod
    def phone_markup():
        phone_button = types.KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
        Markup.markup.add(phone_button)
        return Markup.markup

    @staticmethod
    def start_markup():
        Markup.markup.add('–ü–æ—á–µ–º—É –≤–∞–∂–Ω–æ —Ä–∞–∑—Ä–µ—à–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —É–º–Ω–æ')
        Markup.markup.add('–î–µ–ª–æ —Ç–µ—Ö–Ω–∏–∫–∏')
        Markup.markup.add('–¢–†–ï–ù–ê–ñ–Å–†')
        return Markup.markup

    @staticmethod
    def registration_markup():
        Markup.markup.add('–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
        return Markup.markup

    @staticmethod
    def main_menu_markup():
        Markup.markup.add('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        return Markup.markup

    @staticmethod
    def tech_support_markup():
        Markup.markup.add('–ü–æ–∑–≤–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É')
        return Markup.markup

    @staticmethod
    def mistake_markup():
        Markup.markup.add('–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑')
        return Markup.markup

    @staticmethod
    def training_markup(cache, card_number, step):

        cached_answers = cache.get(f'answers_{card_number}_{step}')

        if cached_answers:
            answers = cached_answers.split('\n')
        else:
            answers = list(Markup.repository.cards.objects.values_list(f'answers_{step}', flat=True).filter(pk=card_number))[0].split('\n')
            cache.set(f'answers_{card_number}_{step}', '\n'.join(answers).encode('utf-8'), timeout=60 * 60 * 1)

        random.shuffle(answers)

        for answer in answers:
            Markup.markup.add(answer)
        return Markup.markup

    @staticmethod
    def end_training_markup():
        Markup.markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        Markup.markup.add('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è')
        return Markup.markup

    @staticmethod
    def yes_or_not_markup():
        Markup.markup.add('–î–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º')
        Markup.markup.add('–ù–µ—Ç, —è —Ö–æ—á—É –ø–æ–º–µ–Ω—è—Ç—å')
        return Markup.markup

    @staticmethod
    def get_mood_markup():
        inline_markup = types.InlineKeyboardMarkup(row_width=5)

        row = [InlineKeyboardButton('10üëç', callback_data=str(10))]
        for i in range(9, 1, -1):
            row.append(InlineKeyboardButton(str(i), callback_data=str(i)))
            if len(row) == 5:
                inline_markup.row(*row)
                row = []

        row.append(InlineKeyboardButton('1üëé', callback_data=str(1)))
        if row:
            inline_markup.row(*row)

        return inline_markup
