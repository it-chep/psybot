import asyncio
import pickle
from abc import ABC
import random
import string
from asyncio import sleep
from telegrambot.async_work.async_work import token_delay

# from .utils import forgot_password
from django.core.mail import send_mail
from django.db.utils import ProgrammingError
from django.contrib.auth import authenticate
from django.contrib.auth.hashers import make_password
from django.http import HttpResponseRedirect
from django.shortcuts import redirect
from rest_framework import serializers
from rest_framework.serializers import ModelSerializer

from telegrambot.repository.repository import Workers
from users.models import CustomUser
from .forms import SignUpForm


class RegistrationSerializer(serializers.Serializer):
    phone_number = serializers.CharField(required=True)
    password = serializers.CharField(write_only=True)
    email = serializers.EmailField()

    def validate(self, data):

        if CustomUser.objects.filter(phone_number__icontains=data['phone_number']).exists():
            raise serializers.ValidationError({'phone_number': 'not_unique'})

        try:
            Workers.objects.filter(phone_number__icontains=data['phone_number']).get()
        except Workers.DoesNotExist:
            raise serializers.ValidationError({'phone_number': 'invalid'})
        except ProgrammingError:
            raise serializers.ValidationError({'program': 'error'})

        print('[+][+]', data)

        return data

    def create(self, validated_data):
        phone_number = validated_data['phone_number']
        random_string = ''.join(random.choices(string.ascii_letters + string.digits, k=15))

        user_data = Workers.objects.filter(phone_number__icontains=validated_data['phone_number']).get()
        user = CustomUser.objects.create(
            phone_number='8' + phone_number,
            password=make_password(validated_data['password']),
            job_title=user_data.job_title,
            job_place=user_data.job_place,
            name=user_data.name,
            email=validated_data['email'],
            email_verification_token=random_string,
            verified_email=False
        )

        send_mail(
            '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email',
            '–ü—Ä–∏–≤–µ—Ç, –í—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ —Å–∞–π—Ç–µ –¢—Ä–µ–Ω–∞–∂–µ—Ä –°—á–∞—Å—Ç—å—è. '
            '–ù–æ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º, –Ω–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à—É –ø–æ—á—Ç—É. –ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É,'
            f' –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É    '
            f'<a href="https://happinesstrainer.ru/users/verificate_email/get_token/?token={random_string}" '
            'style="display: inline-block; background-color: #007bff; color: #fff; padding: 10px; " \
                  "text-decoration: none; border-radius: 5px;">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ—á—Ç—É</a>',
            'happinesstrainer@yandex.ru',
            [f'{validated_data["email"]}'],
            fail_silently=False,
            html_message='–ü—Ä–∏–≤–µ—Ç, –í—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ —Å–∞–π—Ç–µ –¢—Ä–µ–Ω–∞–∂–µ—Ä –°—á–∞—Å—Ç—å—è. '
                         '–ù–æ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º, –Ω–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à—É –ø–æ—á—Ç—É. –ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É,'
                         f' –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É    '
                         f'<a href="https://happinesstrainer.ru/users/verificate_email/get_token/?token={random_string}" '
                         'style="display: inline-block; background-color: #007bff; color: #fff; padding: 10px; " \
                               "text-decoration: none; border-radius: 5px;">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ—á—Ç—É</a>',
        )

        # authenticate(phone_number=phone_number, password=validated_data['password'])
        # validated_data['user'] = user

        return user


class LoginSerializer(serializers.Serializer):
    phone_number = serializers.CharField()
    password = serializers.CharField()

    def validate(self, data):

        phone_number = '8' + data.get('phone_number')
        password = data.get('password')

        if phone_number and password:
            user = authenticate(phone_number=phone_number, password=password)
            if user:
                data['user'] = user
            else:
                try:
                    Workers.objects.filter(phone_number__icontains=phone_number).get()
                except Workers.DoesNotExist:
                    raise serializers.ValidationError({'user': 'non_phone'})
                raise serializers.ValidationError({'user': 'invalid_data'})
        else:
            raise serializers.ValidationError({'user': 'incomplete'})

        return data


class ForgotPasswordSerializer(serializers.Serializer):
    email = serializers.EmailField()

    def validate(self, data):
        email = data.get('email')
        if CustomUser.objects.filter(email=email).exists():
            random_string = ''.join(random.choices(string.ascii_letters + string.digits, k=15))

            user = CustomUser.objects.filter(email=email).get()
            pk = user.pk
            user.email_verification_token = random_string
            user.save()

            # asya = AsyncUsers()
            token_delay.delay(pk)

            send_mail(
                '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è',
                '–ü—Ä–∏–≤–µ—Ç, –≤–∏–∂—É, —á—Ç–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å üôÅ'
                '–ß—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–∫–∫—É–Ω—Ç—É –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '
                             f'<a href="https://happinesstrainer.ru/users/forgot_password/validate_token/?token={random_string}" '
                'style="display: inline-block; background-color: #007bff; color: #fff; padding: 10px; " \
                  "text-decoration: none; border-radius: 5px;">–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å</a>',
                'happinesstrainer@yandex.ru',
                [email],
                fail_silently=False,
                html_message='–ü—Ä–∏–≤–µ—Ç, –≤–∏–∂—É, —á—Ç–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å üôÅ'
                             '–ß—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–∫–∫—É–Ω—Ç—É –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '
                             f'<a href='
                             f'"https://happinesstrainer.ru/users/forgot_password/validate_token/?token={random_string}" '
                             'style="display: inline-block; background-color: #007bff; color: #fff; padding: 10px; " \
                               "text-decoration: none; border-radius: 5px;">–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å</a>',
            )

        else:
            raise serializers.ValidationError({'email': 'not_exist'})

        return data


class ChangePasswordSerializer(serializers.Serializer):
    password = serializers.CharField()
    token = serializers.CharField()

    def validate(self, data):
        # –ü–æ–º–µ–Ω—è—Ç—å –ø–∞—Ä–æ–ª—å –∏ –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –∑–∞–ª–æ–≥–∏–Ω–∏—Ç—å –µ–≥–æ
        # print(password)
        if CustomUser.objects.filter(email_verification_token=data['token']).exists():
            user = CustomUser.objects.filter(email_verification_token=data['token']).get()
            user.set_password(data['password'])
            # user.password = data['password']
            user.save()
            return user
        else:
            raise serializers.ValidationError({'error': 'invalid_serializer'})

